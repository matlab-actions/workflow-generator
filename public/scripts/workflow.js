function parseRepositoryURL(repoURL) {
  if (repoURL.endsWith(".git")) {
    repoURL = repoURL.slice(0, -4);
  }
  try {
    const url = new URL(repoURL);
    let parts = url.pathname.split("/").filter(Boolean);
    if (
      url.host === "github.com" &&
      parts[0] === "enterprises" &&
      parts.length >= 4
    ) {
      // https://github.com/enterprises/{enterprise_slug}/{owner}/{repo}
      return {
        origin: url.origin,
        enterprise: parts[1],
        owner: parts[2],
        repo: parts[3],
      };
    } else if (parts.length >= 2) {
      // https://github.com/{owner}/{repo}
      return {
        origin: url.origin,
        owner: parts[0],
        repo: parts[1],
      };
    }
    return null;
  } catch {
    // {owner}/{repo}
    const parts = repoURL.split("/").filter(Boolean);
    return parts.length === 2
      ? { owner: parts[0], repo: parts[1], origin: "https://github.com" }
      : null;
  }
}

function generateWorkflow({
  useBatchToken = false,
  useVirtualDisplay = false,
  buildAcrossPlatforms = false,
  siteUrl = "http://localhost/",
  jsyaml,
}) {
  const yamlObject = {
    name: "MATLAB",
    on: {
      push: {
        branches: ["main"],
      },
      pull_request: {
        branches: ["main"],
      },
      workflow_dispatch: {},
    },
    ...(useBatchToken && {
      env: {
        MLM_LICENSE_TOKEN: "${{ secrets.MLM_LICENSE_TOKEN }}",
      },
    }),
    jobs: {
      build: {
        ...(buildAcrossPlatforms
          ? {
              strategy: {
                "fail-fast": false,
                matrix: {
                  os: ["ubuntu-latest", "windows-latest", "macos-latest"],
                },
              },
              "runs-on": "${{ matrix.os }}",
            }
          : {
              "runs-on": "ubuntu-latest",
            }),
        steps: [
          {
            uses: "actions/checkout@v4",
          },
          ...(useVirtualDisplay
            ? [
                {
                  name: "Start virtual display server",
                  if: "runner.os == 'Linux'",
                  run: [
                    "sudo apt-get install -y xvfb",
                    "Xvfb :99 &",
                    'echo "DISPLAY=:99" >> $GITHUB_ENV',
                  ].join("\n"),
                },
              ]
            : []),
          {
            name: "Set up MATLAB",
            uses: "matlab-actions/setup-matlab@v2",
            with: {
              release: "latest",
              products: "Simulink Deep_Learning_Toolbox etc.",
              cache: "true",
            },
          },
          {
            name: "Run MATLAB tests",
            uses: "matlab-actions/run-tests@v2",
          },
        ],
      },
    },
  };

  let yaml = jsyaml.dump(yamlObject, {
    lineWidth: -1,
    noCompatMode: true,
  });
  yaml =
    `# This workflow was generated by ${siteUrl}\n\n` +
    yaml
      .replace(/^(\s*)products:/m, "$1# products:") // comment out products
      .replace(
        /^(\s*)(MLM_LICENSE_TOKEN: .*)/m,
        "$1# You must set the MLM_LICENSE_TOKEN secret in your repository settings\n$1$2",
      ) // comment above MLM_LICENSE_TOKEN
      .replace(/^'on':/m, "on:") // unquote 'on'
      .replace(/'true'/g, "true") // unquote 'true'
      .replace(/branches:\n\s*-\s*(\w+)/g, "branches: [$1]") // inline branches
      .replace(
        /os:\n\s*-\s*(\S+)\n\s*-\s*(\S+)\n\s*-\s*(\S+)/,
        "os: [$1, $2, $3]",
      ) // inline os matrix
      .replace(/^(on:)/m, "\n$1") // blank before 'on:'
      .replace(/^(env:)/m, "\n$1") // blank before 'env:'
      .replace(/^(jobs:)/m, "\n$1") // blank before 'jobs:'
      .replace(/^(\s*)steps:/gm, "\n$1steps:") // blank before 'steps:'
      .replace(/^(\s*)- name:/gm, "\n$1- name:"); // blank before '- name:'

  return yaml;
}

export { parseRepositoryURL, generateWorkflow };
